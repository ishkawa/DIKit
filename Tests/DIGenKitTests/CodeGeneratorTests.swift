//
//  CodeGeneratorTests.swift
//  DIGenKitTests
//
//  Created by Yosuke Ishikawa on 2017/11/14.
//

import Foundation
import XCTest
import SourceKittenFramework

@testable import DIGenKit

final class CodeGeneratorTests: XCTestCase {
    func testDeclarationPriority() throws {
        // Provide 3 ways to get instance of A
        let code = """
            import DIKit

            struct A: Injectable, FactoryMethodInjectable {
                struct Dependency {
                    let value: Int
                }

                init(dependency: Dependency) {}

                static func makeInstance(dependency: Dependency) {}
            }

            protocol TestResolver: Resolver {
                func provideA() -> A
            }
            """

        let file = File(contents: code)
        let generator = try CodeGenerator(files: [file])
        let contents = try generator.generate().trimmingCharacters(in: .whitespacesAndNewlines)

        // Generated code uses provider method only
        XCTAssertEqual(contents, """
        //
        //  Resolver.swift
        //  Generated by dikitgen.
        //

        import DIKit

        extension TestResolver {

            func resolveA() -> A {
                return provideA()
            }

        }
        """)
    }

    func testProperties() throws {
        let code = """
            import DIKit

            struct A: Injectable {
                struct Dependency {
                    let value: Int
                    let closure1: (Int) -> Void
                    let closure2: (Int) throws -> Void
            //        let closure3: ((Int) -> Void)?
            //        let closure4: Optional<(Int) -> Void>
            //        let closure5: (Bool, (Int) -> Void)
                }

                init(dependency: Dependency) {}
            }

            protocol TestResolver: Resolver {
            }
            """

        let file = File(contents: code)
        let generator = try CodeGenerator(files: [file])
        let contents = try generator.generate().trimmingCharacters(in: .whitespacesAndNewlines)

        // Generated code uses provider method only
        XCTAssertEqual(contents, """
        //
        //  Resolver.swift
        //  Generated by dikitgen.
        //

        import DIKit

        extension TestResolver {

            func resolveA(value: Int, closure1: @escaping (Int) -> Void, closure2: @escaping (Int) throws -> Void) -> A {
                return A(dependency: .init(value: value, closure1: closure1, closure2: closure2))
            }

        }
        """)
    }
}
